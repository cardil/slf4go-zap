package slf4go_zap

import (
	"testing"

	slog "github.com/go-eden/slf4go"
	"go.uber.org/zap"
)

func TestInit(t *testing.T) {
	atomLevel := zap.NewAtomicLevelAt(zap.DebugLevel)
	encoderConfig := zap.NewDevelopmentEncoderConfig()
	cfg := zap.Config{
		Level:       atomLevel,
		Development: false,
		// DisableCaller:     true,
		DisableStacktrace: true,
		Encoding:          "console",
		EncoderConfig:     encoderConfig,
		OutputPaths:       []string{"stdout"},
		ErrorOutputPaths:  []string{"stdout"},
		InitialFields:     map[string]interface{}{"foo": "bar"},
	}

	Init(&cfg)

	// default logger
	slog.Debug("global logger")
	slog.Warnf("global logger, warnning: %v", "surrender")

	// root logger
	l := slog.GetLogger()
	l.BindFields(slog.Fields{
		"type": "root",
	})
	l.Errorf("root logger name=%s", l.Name())

	// logger generated by with function
	l2 := l.WithFields(slog.Fields{"type": "with"})
	l2.Infof("with logger name=%s", l2.Name())

	// logger generated by newLogger function
	l3 := slog.NewLogger("NewLogger")
	l3.BindFields(slog.Fields{"type": "new"})
	l3.Infof("new logger name=%s", l3.Name())
}
